#+TITLE: Wolf's GNU Emacs Config
#+AUTHOR: wolfinthedepths
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#important-programs-to-load-first][Important Programs to load first]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#plugins][Plugins]]
  - [[#ivy-counsel][Ivy (Counsel)]]
  - [[#magit][Magit]]
  - [[#eshell][Eshell]]
  - [[#all-the-icons][All The Icons]]
- [[#fonts][Fonts]]
  - [[#setting-the-default-font-faces][Setting the default font faces]]
  - [[#zooming-inout][Zooming in/out]]
- [[#graphical-user-interface-tweaks][Graphical User Interface Tweaks]]
  - [[#disable-menubar-toolbars-and-scrollbar][Disable menubar, toolbars and scrollbar]]
  - [[#display-relative-line-numbers-and-truncated-lines][Display relative line numbers and truncated lines]]
- [[#org-mode][Org Mode]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#org-tempo][Org-Tempo]]
- [[#sudo-edit][Sudo Edit]]
- [[#which-key][Which-Key]]

* Important Programs to load first

** Elpaca Package Manager
Disabling the default Emacs package manager and setting up Elpaca instead.

#+begin_src emacs-lisp

  (defvar elpaca-installer-version 0.8)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

#+end_src

** Load Evil Mode
Vim keybindings are simply better. Setting them up via evil-mode.

#+begin_src emacs-lisp

  (elpaca elpaca-use-package
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t))

  (elpaca-wait)

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :ensure t
    :after evil
    :init
    (evil-collection-init))

  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

#+end_src

** General Keybindings
General is a nice plugin for keybinding management. Setting it up here.

*** General.el setup

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer wolf/leader
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode
  
#+end_src

*** Buffer Keybindings

#+begin_src emacs-lisp

  (wolf/leader
    ;; buffer stuff
    "b"  '(:ignore t :wk "Buffer")
    "b b" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b n" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
  )

#+end_src

*** Buffer Move functions
These functions will provide functionality to move buffers around in a window.

#+begin_src emacs-lisp

  (require 'windmove)

  ;;;###autoload
  (defun buf-move-up ()
    "Swap the current buffer and the buffer above the split.
  If there is no split, ie now window above the current one, an
  error is signaled."
  ;;  "Switches between the current buffer, and the buffer above the
  ;;  split, if possible."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'up))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No window above this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-down ()
  "Swap the current buffer and the buffer under the split.
  If there is no split, ie now window under the current one, an
  error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'down))
           (buf-this-buf (window-buffer (selected-window))))
      (if (or (null other-win) 
              (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
          (error "No window under this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-left ()
  "Swap the current buffer and the buffer on the left of the split.
  If there is no split, ie now window on the left of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'left))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No left split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
  If there is no split, ie now window on the right of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'right))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No right split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

#+end_src

*** Window Keybindings

#+begin_src emacs-lisp
  
  (wolf/leader
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))

#+end_src

*** Eshell/Evaluate Keybindings

#+begin_src emacs-lisp

  (wolf/leader
    "e"  '(:ignore t :wk "Eshell/Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate an elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e h" '(counsel-esh-history :wk "Eshell history")
    "e s" '(eshell :wk "Eshell")
  )

#+end_src

*** Magit Keybindings

#+begin_src emacs-lisp

  (wolf/leader
    "g"  '(:ignore t :wk "Magit")
    "g g"  '(magit-status :wk "Magit Status")
  )

#+end_src

*** Help Keybindings

#+begin_src emacs-lisp

  (wolf/leader
    "h"  '(:ignore t :wk "Help")
    "h f"  '(describe-function :wk "Describe function")
    "h v"  '(describe-variable :wk "Describe variable")
    "h r r"  '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config")
  )

#+end_src

*** Toggles

#+begin_src emacs-lisp

  (wolf/leader
    "t"  '(:ignore t :wk "Toggle")
    "t l"  '(display-line-numbers-mode :wk "Toggle line numbers")
  )

#+end_src

*** Misc Keybindings

#+begin_src emacs-lisp

  (wolf/leader
    "."  '(find-file :wk "Find File") 
    "f p" '((lambda () (interactive) (find-file "~/.config/emacs/README.org")) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Find recent files")
    "TAB TAB"  '(comment-line :wk "Comment lines") 
  ))

#+end_src

* Plugins

** Ivy (Counsel)
+ Ivy is a generic completion mechanism for Emacs
+ Counsel is a colection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.
  
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :bind
      (("C-c C-r" . ivy-resume) 
      ("C-x B" . ivy-switch-buffer-other-window))
    :custom
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t)
    :config
      (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode t))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1)
    :custom
      (ivy-virtual-abbreviate 'full
      ivy-rich-switch-buffer-align-virtual-buffer t
      ivy-rich-path-style 'abbrev)
    :config
      (ivy-set-display-transformer 'ivy-switch-buffer
                                   'ivy-rich-switch-buffer-transformer))

#+end_src

** Magit
Installing Magit, the Emacs Git interface.

#+begin_src emacs-lisp

  (use-package transient)

  (use-package magit
    :ensure t)

#+end_src

** Eshell
Eshell is an Emacs 'shell' that's written in Elisp.

#+begin_src emacs-lisp

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config (eshell-syntax-highlighting-global-mode +1))
  
  (setq rc-script (concat user-emacs-directory "eshell/profile")
        aliases-file (concat user-emacs-directory "eshell/aliases")
        history-size 5000
        buffer-maximum-lines 5000
        hist-ignoredups t
        scroll-to-bottom-on-input t
        destroy-buffer-when-process-dies t
        visual-commands'("bash" "htop" "ssh" "top" "zsh"))

#+end_src

** All The Icons
Icon set that can be used all over the place in Emacs.

#+begin_src emacs-lisp

  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

#+end_src

* Fonts
Setting default font sizes, and making comments and keywords italicized.

** Setting the default font faces

#+begin_src emacs-lisp

  (set-face-attribute 'default nil
    :height 130
    :weight 'medium)

  (set-face-attribute 'variable-pitch nil
    :height 150
    :weight 'medium)

  (set-face-attribute 'fixed-pitch nil
    :height 130
    :weight 'medium)

  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)

  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

#+end_src

** Zooming in/out

#+begin_src emacs-lisp

  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-increase)

#+end_src

* Graphical User Interface Tweaks
Configs to make the UI experience better.

** Disable menubar, toolbars and scrollbar
No one needs these, just give me a rectangle that displays text. Using the mouse is for weak people.

#+begin_src emacs-lisp

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

#+end_src

** Display relative line numbers and truncated lines
Need these.

#+begin_src emacs-lisp

  (global-display-line-numbers-mode t)
  (global-visual-line-mode t)
  (setq display-line-numbers-type 'relative)

#+end_src

* Org Mode
Amazing Emacs feature, but it needs some configuration (just like everything in the world because sane defaults don't actually exist anywhere)

** Enabling Table of Contents
Table of Contents generation that just works.

#+begin_src emacs-lisp

  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

#+end_src

** Enabling Org Bullets
Default Org Mode uses asterisks for bullets, which don't look that good. Replacing them with stylised bullets here.

#+begin_src emacs-lisp

  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src

** Disable Electric Indent
Org mode source blocks have weird behaviour surrounding indentation, which has to do with Electric Indent.

#+begin_src emacs-lisp

  (electric-indent-mode -1)

#+end_src

** Org-Tempo
This enables usage of the `<s TAB ` shorthand to create a source code block.

#+begin_src emacs-lisp
  
  (require 'org-tempo)

#+end_src

* Sudo Edit
Sudo-Edit is a plugin that lets you edit files with superuser access.

#+begin_src emacs-lisp

  (use-package sudo-edit
    :config
      (wolf/leader
        "f u" '(sudo-edit-find-file :wk "Sudo find file")
        "f U" '(sudo-edit :wk "Sudo edit file")
      )
  )

#+end_src

* Which-Key
Which-Key displays helpful keybinding tooltips.

#+begin_src emacs-lisp

  (use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
      which-key-sort-order #'which-key-key-order-alpha
      which-key-sort-uppercase-first nil
      which-key-add-column-padding 1
      which-key-max-display-columns nil
      which-key-min-display-lines 6
      which-key-side-window-slot -10
      which-key-side-window-max-height 0.25
      which-key-idle-delay 0.8
      which-key-max-description-length 25
      which-key-allow-imprecise-window-fit t
      which-key-separator " → "))

#+end_src

