#+TITLE: Wolf's GNU Emacs Config
#+AUTHOR: wolfinthedepths
#+STARTUP: showeverything

* Table of Contents :toc:
- [[#important-programs-to-load-first][Important Programs to load first]]
  - [[#adding-the-scripts-directory-to-path][Adding the scripts directory to path]]
  - [[#sourcing-the-scripts][Sourcing the scripts]]
- [[#all-the-icons][All The Icons]]
- [[#backup][Backup]]
- [[#company][Company]]
- [[#dashboard][Dashboard]]
- [[#diminish][Diminish]]
- [[#dired][Dired]]
- [[#eshell][Eshell]]
- [[#evil-mode][Evil Mode]]
- [[#flycheck][Flycheck]]
- [[#fonts][Fonts]]
  - [[#setting-the-default-font-faces][Setting the default font faces]]
  - [[#zooming-inout][Zooming in/out]]
- [[#graphical-user-interface-tweaks][Graphical User Interface Tweaks]]
  - [[#disable-menubar-toolbars-and-scrollbar][Disable menubar, toolbars and scrollbar]]
  - [[#display-relative-line-numbers-and-truncated-lines][Display relative line numbers and truncated lines]]
  - [[#transparency][Transparency]]
- [[#ivy-counsel][Ivy (Counsel)]]
- [[#keybindings][Keybindings]]
  - [[#generalel-setup][General.el setup]]
  - [[#bufferbookmark-keybindings][Buffer/Bookmark Keybindings]]
  - [[#dired-keybindings][Dired Keybindings]]
  - [[#window-keybindings][Window Keybindings]]
  - [[#eshellevaluate-keybindings][Eshell/Evaluate Keybindings]]
  - [[#magit-keybindings][Magit Keybindings]]
  - [[#org-mode-keybindings][Org Mode Keybindings]]
  - [[#quit-keybindings][Quit Keybindings]]
  - [[#help-keybindings][Help Keybindings]]
  - [[#toggles][Toggles]]
  - [[#misc-keybindings][Misc Keybindings]]
- [[#language-support][Language Support]]
- [[#magit][Magit]]
- [[#modeline][Modeline]]
- [[#neotree][Neotree]]
- [[#org-mode][Org Mode]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#org-tempo][Org-Tempo]]
- [[#projectile][Projectile]]
- [[#rainbow-mode][Rainbow Mode]]
- [[#sudo-edit][Sudo Edit]]
- [[#vterm][Vterm]]
- [[#vterm-toggle][Vterm-Toggle]]
- [[#which-key][Which-Key]]

* Important Programs to load first

** Adding the scripts directory to path
The scripts directory contains the emacs-lisp code that needs to run first, but doesn't need to be edited much (or at all).

#+begin_src emacs-lisp

(add-to-list 'load-path "~/.config/emacs/scripts/")

#+end_src

** Sourcing the scripts

#+begin_src emacs-lisp

(require 'elpaca-setup)   ;; the Elpaca Package Manager
(require 'buffer-move)    ;; Buffer-Move for better window management
(require 'app-launchers)  ;; Run-launcher functionality through emacs

#+end_src

* All The Icons
Icon set that can be used all over the place in Emacs.

#+begin_src emacs-lisp

  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

#+end_src

* Backup
By default, Emacs creates auto-backups of files in their original directoryes. This leads to a lot of clutter, so let's tell Emacs to put all backups in the =TRASH= category.

#+begin_src emacs-lisp

(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))

#+end_src

* Company
A text completion framework for Emacs. M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp

(use-package company
  :defer 2
  :diminish
  :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))

#+end_src

* Dashboard
Emacs Dashboard is an extensible startup screen showing recent files, bookmarks, agenda ieams and an Emacs banner.

#+begin_src emacs-lisp

  (use-package dashboard
    :ensure t
    :init
      (setq initial-buffer-choice 'dashboard-open)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-icon-type 'all-the-icons)
      (setq dashboard-startup-banner 'logo)
      (setq dashboard-center-content nil)
      (setq dashboard-items '((recents . 5)
                              (agenda . 5)
                              (bookmarks . 3)
                              (projects . 3)
                              (registers . 3)))
    :config
      (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
      (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
      (dashboard-setup-startup-hook))

#+end_src

* Diminish
Implements hiding or abbreviation of the modeline displays of minor-modes.

#+begin_src emacs-lisp

(use-package diminish)

#+end_src

* Dired
The Emacs file browser.

#+begin_src emacs-lisp

(use-package dired-open
  :config
    (setq dired-open-extensions '(("gif" . "feh")
                                  ("jpg" . "feh")
                                  ("jpg" . "feh")
                                  ("mkv" . "mpv")
                                  ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal dired-mode-map (kbd "k") 'peep-dired-prev-file)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file))

#+end_src

* Eshell
Eshell is an Emacs 'shell' that's written in Elisp.

#+begin_src emacs-lisp

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config (eshell-syntax-highlighting-global-mode +1))
  
  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "htop" "ssh" "top" "zsh"))

#+end_src

* Evil Mode
Vim keybindings are simply better. Setting them up via evil-mode.

#+begin_src emacs-lisp

(setq evil-undo-system 'undo-redo)

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
(use-package evil-collection
  :ensure t
  :after evil
  :init
  (evil-collection-init))

(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))


;; Using RETURN to follow links in Org/Evil
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
(setq org-return-follows-link t)

#+end_src

* Flycheck
Language support and error checking inside Emacs.

#+begin_src emacs-lisp

(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))

#+end_src

* Fonts
Setting default font sizes, and making comments and keywords italicized.

** Setting the default font faces

#+begin_src emacs-lisp

(set-face-attribute 'default nil
  :height 130
  :weight 'medium)

(set-face-attribute 'variable-pitch nil
  :height 150
  :weight 'medium)

(set-face-attribute 'fixed-pitch nil
  :height 130
  :weight 'medium)

(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)

(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

#+end_src

** Zooming in/out

#+begin_src emacs-lisp

  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-increase)

#+end_src

* Graphical User Interface Tweaks
Configs to make the UI experience better.

** Disable menubar, toolbars and scrollbar
No one needs these, just give me a rectangle that displays text. Using the mouse is for weak people.

#+begin_src emacs-lisp

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

#+end_src

** Display relative line numbers and truncated lines
Need these.

#+begin_src emacs-lisp

(global-display-line-numbers-mode t)
(global-visual-line-mode t)
(setq display-line-numbers-type 'relative)

#+end_src

** Transparency

#+begin_src emacs-lisp

(set-frame-parameter nil 'alpha-background 90)
(add-to-list 'default-frame-alist '(alpha-background 90))

#+end_src

* Ivy (Counsel)
+ Ivy is a generic completion mechanism for Emacs
+ Counsel is a colection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.
  
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :diminish
  :config (counsel-mode))

(use-package ivy
  :bind
    (("C-c C-r" . ivy-resume) 
    ("C-x B" . ivy-switch-buffer-other-window))
  :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
  :config
    (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode t))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1)
  :custom
    (ivy-virtual-abbreviate 'full
    ivy-rich-switch-buffer-align-virtual-buffer t
    ivy-rich-path-style 'abbrev)
  :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))

#+end_src

* Keybindings
General is a nice plugin for keybinding management. Setting it up here.

** General.el setup

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer wolf/leader
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode
  
#+end_src

** Buffer/Bookmark Keybindings

#+begin_src emacs-lisp

  (wolf/leader
    ;; buffer stuff
    "b"  '(:ignore t :wk "Buffers/Bookmarks")
    "b b" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Revert buffer")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b r" '(bookmark-delete :wk "Delete bookmark")
    "b l" '(list-bookmarks :wk "List bookmark")
  )

#+end_src

** Dired Keybindings

#+begin_src emacs-lisp

(wolf/leader
  "d"   '(:ignore t :wk "Dired")
  "d d" '(dired :wk "Open dired")
  "d j" '(dired-jump :wk "Dired jump to current")
  "d n" '(neotree-dir :wk "Open directory in neotree")
  "d p" '(peep-dired :wk "Peep-dired"))

#+end_src

** Window Keybindings

#+begin_src emacs-lisp
  
  (wolf/leader
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))

#+end_src

** Eshell/Evaluate Keybindings

#+begin_src emacs-lisp

  (wolf/leader
    "e"  '(:ignore t :wk "Eshell/Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate an elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e h" '(counsel-esh-history :wk "Eshell history")
    "e s" '(eshell :wk "Eshell")
  )

#+end_src

** Magit Keybindings

#+begin_src emacs-lisp

  (wolf/leader
    "g"  '(:ignore t :wk "Magit")
    "g g"  '(magit-status :wk "Magit Status")
  )

#+end_src

** Org Mode Keybindings

#+begin_src emacs-lisp

  (wolf/leader
    "m"   '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org Agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list")

    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table0insert-hline :wk "Insert hline in table")

    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp")
  )

#+end_src

** Quit Keybindings

#+begin_src emacs-lisp

(wolf/leader
  "q"   '(:ignore t :wk "Quit")
  "q f" '(delete-frame :wk "Quit this frame"))

#+end_src

** Help Keybindings

#+begin_src emacs-lisp

(wolf/leader
  "h"     '(:ignore t :wk "Help")
  "h d"   '(:ignore t :wk "Documentation")
  "h d a" '(about-emacs :wk "About Emacs")
  "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
  "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
  "h d m" '(info-emacs-manual :wk "The Emacs manual")
  "h d n" '(view-emacs-news :wk "View Emacs news")
  "h d o" '(describe-distribution :wk "How to obtain Emacs")
  "h d p" '(view-emacs-problems :wk "View Emacs problems")
  "h d t" '(view-emacs-todo :wk "View Emacs todo")
  "h d w" '(describe-no-warranty :wk "Describe no warranty")
  "h f"   '(describe-function :wk "Describe function")
  "h v"   '(describe-variable :wk "Describe variable")

  "h r"   '(:ignore t :wk "Reload")
  "h r r"  '((lambda () (interactive) 
               (load-file "~/.config/emacs/init.el")
               (ignore (elpaca-process-queues))) :wk "Reload emacs config")
  )

#+end_src

** Toggles

#+begin_src emacs-lisp

(wolf/leader
  "t"  '(:ignore t :wk "Toggle")
  "t l"  '(display-line-numbers-mode :wk "Toggle line numbers")
  "t n"  '(neotree-toggle :wk "Toggle neotree")
  "t v"  '(vterm-toggle :wk "Toggle vterm")
)

#+end_src

** Misc Keybindings

#+begin_src emacs-lisp

  (wolf/leader
    "."  '(find-file :wk "Find File") 
    "SPC"  '(counsel-M-x :wk "Counsel M-x") 
    "f p" '((lambda () (interactive) (find-file "~/.config/emacs/README.org")) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Find recent files")
    "TAB TAB"  '(comment-line :wk "Comment lines") 
  ))

#+end_src

* Language Support
Emacs has built-in support for many programming languages like Lisp, C, C++, Java, Python, and many more. Other languages still require installation of additional modes.

#+begin_src emacs-lisp

(use-package lua-mode)
(use-package nix-mode
  :mode "\\.nix\\'")

#+end_src

* Magit
Installing Magit, the Emacs Git interface.

#+begin_src emacs-lisp

  (use-package transient)

  (use-package magit
    :ensure t)

#+end_src

* Modeline
The modeline is the bottom status bar that appears in Emacs windows. While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.

#+begin_src emacs-lisp

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
    (setq doom-modeline-height 30
          doom-modeline-bar-width 5
          doom-modeline-persp-name t
          doom-modeline-persp-icon t))

#+end_src

* Neotree
A file tree viewer.

#+begin_src emacs-lisp

(use-package neotree
  :config
    (setq neo-smart-open t
          neo-show-hidden-files t
          neo-window-width 45
          neo-window-fixed-size nil
          inhibit-compacting-font-caches t
          projectile-switch-project-action 'neotree-projectile-action)
    (add-hook 'neo-after-create-hook
      #'(lambda (_)
          (with-current-buffer (get-buffer neo-buffer-name)
            (setq truncate-lines t)
            (setq word-wrap nil)
            (make-local-variable 'auto-hscroll-mode)
            (setq auto-hscroll-mode nil)))))

#+end_src

* Org Mode
Amazing Emacs feature, but it needs some configuration (just like everything in the world because sane defaults don't actually exist anywhere)

** Enabling Table of Contents
Table of Contents generation that just works.

#+begin_src emacs-lisp

  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

#+end_src

** Enabling Org Bullets
Default Org Mode uses asterisks for bullets, which don't look that good. Replacing them with stylised bullets here.

#+begin_src emacs-lisp

  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src

** Disable Electric Indent
Org mode source blocks have weird behaviour surrounding indentation, which has to do with Electric Indent.

#+begin_src emacs-lisp

(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)

#+end_src

** Org-Tempo
This enables usage of the `<s TAB ` shorthand to create a source code block.

#+begin_src emacs-lisp
  
  (require 'org-tempo)

#+end_src

* Projectile
Projectile is a project interaction library for Emacs.

#+begin_src emacs-lisp

(use-package projectile
  :diminish
  :config
    (projectile-mode 1))

#+end_src

* Rainbow Mode
Displays previews for all colour codes.

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :diminish
    :hook
      ((org-mode prog-mode) . rainbow-mode))

#+end_src

* Sudo Edit
Sudo-Edit is a plugin that lets you edit files with superuser access.

#+begin_src emacs-lisp

(use-package sudo-edit
  :config
    (wolf/leader
      "f u" '(sudo-edit-find-file :wk "Sudo find file")
      "f U" '(sudo-edit :wk "Sudo edit file")
    )
)

#+end_src

* Vterm
A terminal emulator within Emacs.

#+begin_src emacs-lisp

(use-package vterm
  :config
    (setq shell-file-name "zsh"
	    vterm-shell "zsh"
          vterm-max-scrollback 5000))

#+end_src

* Vterm-Toggle
Toggles between the vterm buffer and whatever buffer you're editing.

#+begin_src emacs-lisp

(use-package vterm-toggle
  :after vterm
  :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
		 '((lambda (buffer-or-name _)
		     (let ((buffer (get-buffer buffer-or-name)))
		       (with-current-buffer buffer
			 (or (equal major-mode 'vterm-mode)
			     (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
		   (display-buffer-reuse-window display-buffer-in-direction)
		   ;;(display-buffer-reuse-window display-buffer-in-direction)
		   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
		   ;;(direction . bottom)
		   ;;(dedicated . t) ;dedicated is supported in emacs27
		   (reusable-frames . visible)
		   (window-height . 0.3))))

#+end_src


* Which-Key
Which-Key displays helpful keybinding tooltips.

#+begin_src emacs-lisp

(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
    which-key-sort-order #'which-key-key-order-alpha
    which-key-sort-uppercase-first nil
    which-key-add-column-padding 1
    which-key-max-display-columns nil
    which-key-min-display-lines 6
    which-key-side-window-slot -10
    which-key-side-window-max-height 0.25
    which-key-idle-delay 0.8
    which-key-max-description-length 25
    which-key-allow-imprecise-window-fit t
    which-key-separator " → "))

#+end_src


